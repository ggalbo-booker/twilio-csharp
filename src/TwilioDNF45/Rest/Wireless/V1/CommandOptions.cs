/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Wireless.V1 
{

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// FetchCommandOptions
    /// </summary>
    public class FetchCommandOptions : IOptions<CommandResource> 
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchCommandOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public FetchCommandOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// ReadCommandOptions
    /// </summary>
    public class ReadCommandOptions : ReadOptions<CommandResource> 
    {
        /// <summary>
        /// The sim
        /// </summary>
        public string Sim { get; set; }
        /// <summary>
        /// The status
        /// </summary>
        public CommandResource.StatusEnum Status { get; set; }
        /// <summary>
        /// The direction
        /// </summary>
        public CommandResource.DirectionEnum Direction { get; set; }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }

            if (Status != null)
            {
                p.Add(new KeyValuePair<string, string>("Status", Status.ToString()));
            }

            if (Direction != null)
            {
                p.Add(new KeyValuePair<string, string>("Direction", Direction.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains beta products that are subject to change. Use them with caution.
    /// 
    /// CreateCommandOptions
    /// </summary>
    public class CreateCommandOptions : IOptions<CommandResource> 
    {
        /// <summary>
        /// The command
        /// </summary>
        public string Command { get; }
        /// <summary>
        /// The sim
        /// </summary>
        public string Sim { get; set; }
        /// <summary>
        /// The callback_method
        /// </summary>
        public Twilio.Http.HttpMethod CallbackMethod { get; set; }
        /// <summary>
        /// The callback_url
        /// </summary>
        public Uri CallbackUrl { get; set; }
        /// <summary>
        /// The command_mode
        /// </summary>
        public CommandResource.CommandModeEnum CommandMode { get; set; }
        /// <summary>
        /// The include_sid
        /// </summary>
        public string IncludeSid { get; set; }

        /// <summary>
        /// Construct a new CreateCommandOptions
        /// </summary>
        /// <param name="command"> The command </param>
        public CreateCommandOptions(string command)
        {
            Command = command;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Command != null)
            {
                p.Add(new KeyValuePair<string, string>("Command", Command));
            }

            if (Sim != null)
            {
                p.Add(new KeyValuePair<string, string>("Sim", Sim));
            }

            if (CallbackMethod != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackMethod", CallbackMethod.ToString()));
            }

            if (CallbackUrl != null)
            {
                p.Add(new KeyValuePair<string, string>("CallbackUrl", CallbackUrl.AbsoluteUri.TrimEnd('/')));
            }

            if (CommandMode != null)
            {
                p.Add(new KeyValuePair<string, string>("CommandMode", CommandMode.ToString()));
            }

            if (IncludeSid != null)
            {
                p.Add(new KeyValuePair<string, string>("IncludeSid", IncludeSid));
            }

            return p;
        }
    }

}