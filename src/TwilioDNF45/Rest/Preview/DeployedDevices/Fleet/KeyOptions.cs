/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Preview.DeployedDevices.Fleet 
{

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// FetchKeyOptions
    /// </summary>
    public class FetchKeyOptions : IOptions<KeyResource> 
    {
        /// <summary>
        /// The fleet_sid
        /// </summary>
        public string PathFleetSid { get; }
        /// <summary>
        /// A string that uniquely identifies the Key.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchKeyOptions
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Key. </param>
        public FetchKeyOptions(string pathFleetSid, string pathSid)
        {
            PathFleetSid = pathFleetSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Delete a specific Key credential from the Fleet, effectively disallowing any inbound client connections that are
    /// presenting it.
    /// </summary>
    public class DeleteKeyOptions : IOptions<KeyResource> 
    {
        /// <summary>
        /// The fleet_sid
        /// </summary>
        public string PathFleetSid { get; }
        /// <summary>
        /// A string that uniquely identifies the Key.
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteKeyOptions
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Key. </param>
        public DeleteKeyOptions(string pathFleetSid, string pathSid)
        {
            PathFleetSid = pathFleetSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Create a new Key credential in the Fleet, optionally giving it a friendly name and assigning to a Device.
    /// </summary>
    public class CreateKeyOptions : IOptions<KeyResource> 
    {
        /// <summary>
        /// The fleet_sid
        /// </summary>
        public string PathFleetSid { get; }
        /// <summary>
        /// The human readable description for this Key.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The unique identifier of a Key to be authenticated.
        /// </summary>
        public string DeviceSid { get; set; }

        /// <summary>
        /// Construct a new CreateKeyOptions
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        public CreateKeyOptions(string pathFleetSid)
        {
            PathFleetSid = pathFleetSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (DeviceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DeviceSid", DeviceSid.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Retrieve a list of all Keys credentials belonging to the Fleet.
    /// </summary>
    public class ReadKeyOptions : ReadOptions<KeyResource> 
    {
        /// <summary>
        /// The fleet_sid
        /// </summary>
        public string PathFleetSid { get; }
        /// <summary>
        /// Find all Keys authenticating specified Device.
        /// </summary>
        public string DeviceSid { get; set; }

        /// <summary>
        /// Construct a new ReadKeyOptions
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        public ReadKeyOptions(string pathFleetSid)
        {
            PathFleetSid = pathFleetSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (DeviceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DeviceSid", DeviceSid.ToString()));
            }

            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
    /// currently do not have developer preview access, please contact help@twilio.com.
    /// 
    /// Update the given properties of a specific Key credential in the Fleet, giving it a friendly name or assigning to a
    /// Device.
    /// </summary>
    public class UpdateKeyOptions : IOptions<KeyResource> 
    {
        /// <summary>
        /// The fleet_sid
        /// </summary>
        public string PathFleetSid { get; }
        /// <summary>
        /// A string that uniquely identifies the Key.
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The human readable description for this Key.
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The unique identifier of a Key to be authenticated.
        /// </summary>
        public string DeviceSid { get; set; }

        /// <summary>
        /// Construct a new UpdateKeyOptions
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Key. </param>
        public UpdateKeyOptions(string pathFleetSid, string pathSid)
        {
            PathFleetSid = pathFleetSid;
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (DeviceSid != null)
            {
                p.Add(new KeyValuePair<string, string>("DeviceSid", DeviceSid.ToString()));
            }

            return p;
        }
    }

}