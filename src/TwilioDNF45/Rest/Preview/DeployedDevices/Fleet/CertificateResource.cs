/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// PLEASE NOTE that this class contains preview products that are subject to change. Use them with caution. If you
/// currently do not have developer preview access, please contact help@twilio.com.
/// 
/// CertificateResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;

namespace Twilio.Rest.Preview.DeployedDevices.Fleet 
{

    public class CertificateResource : Resource 
    {
        private static Request BuildFetchRequest(FetchCertificateOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Preview,
                "/DeployedDevices/Fleets/" + options.PathFleetSid + "/Certificates/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Fetch information about a specific Certificate credential in the Fleet.
        /// </summary>
        /// <param name="options"> Fetch Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Fetch(FetchCertificateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Fetch information about a specific Certificate credential in the Fleet.
        /// </summary>
        /// <param name="options"> Fetch Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> FetchAsync(FetchCertificateOptions options, 
                                                                                        ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildFetchRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Fetch information about a specific Certificate credential in the Fleet.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Fetch(string pathFleetSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new FetchCertificateOptions(pathFleetSid, pathSid);
            return Fetch(options, client);
        }

        #if !NET35
        /// <summary>
        /// Fetch information about a specific Certificate credential in the Fleet.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> FetchAsync(string pathFleetSid, 
                                                                                        string pathSid, 
                                                                                        ITwilioRestClient client = null)
        {
            var options = new FetchCertificateOptions(pathFleetSid, pathSid);
            return await FetchAsync(options, client);
        }
        #endif

        private static Request BuildDeleteRequest(DeleteCertificateOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Delete,
                Rest.Domain.Preview,
                "/DeployedDevices/Fleets/" + options.PathFleetSid + "/Certificates/" + options.PathSid + "",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections
        /// that are presenting it.
        /// </summary>
        /// <param name="options"> Delete Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static bool Delete(DeleteCertificateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }

        #if !NET35
        /// <summary>
        /// Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections
        /// that are presenting it.
        /// </summary>
        /// <param name="options"> Delete Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(DeleteCertificateOptions options, 
                                                                          ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildDeleteRequest(options, client));
            return response.StatusCode == System.Net.HttpStatusCode.NoContent;
        }
        #endif

        /// <summary>
        /// Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections
        /// that are presenting it.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static bool Delete(string pathFleetSid, string pathSid, ITwilioRestClient client = null)
        {
            var options = new DeleteCertificateOptions(pathFleetSid, pathSid);
            return Delete(options, client);
        }

        #if !NET35
        /// <summary>
        /// Unregister a specific Certificate credential from the Fleet, effectively disallowing any inbound client connections
        /// that are presenting it.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<bool> DeleteAsync(string pathFleetSid, 
                                                                          string pathSid, 
                                                                          ITwilioRestClient client = null)
        {
            var options = new DeleteCertificateOptions(pathFleetSid, pathSid);
            return await DeleteAsync(options, client);
        }
        #endif

        private static Request BuildCreateRequest(CreateCertificateOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Preview,
                "/DeployedDevices/Fleets/" + options.PathFleetSid + "/Certificates",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
        /// </summary>
        /// <param name="options"> Create Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Create(CreateCertificateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
        /// </summary>
        /// <param name="options"> Create Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> CreateAsync(CreateCertificateOptions options, 
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildCreateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="certificateData"> The public certificate data. </param>
        /// <param name="friendlyName"> The human readable description for this Certificate. </param>
        /// <param name="deviceSid"> The unique identifier of a Device to be authenticated. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Create(string pathFleetSid, 
                                                 string certificateData, 
                                                 string friendlyName = null, 
                                                 string deviceSid = null, 
                                                 ITwilioRestClient client = null)
        {
            var options = new CreateCertificateOptions(pathFleetSid, certificateData){FriendlyName = friendlyName, DeviceSid = deviceSid};
            return Create(options, client);
        }

        #if !NET35
        /// <summary>
        /// Enroll a new Certificate credential to the Fleet, optionally giving it a friendly name and assigning to a Device.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="certificateData"> The public certificate data. </param>
        /// <param name="friendlyName"> The human readable description for this Certificate. </param>
        /// <param name="deviceSid"> The unique identifier of a Device to be authenticated. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> CreateAsync(string pathFleetSid, 
                                                                                         string certificateData, 
                                                                                         string friendlyName = null, 
                                                                                         string deviceSid = null, 
                                                                                         ITwilioRestClient client = null)
        {
            var options = new CreateCertificateOptions(pathFleetSid, certificateData){FriendlyName = friendlyName, DeviceSid = deviceSid};
            return await CreateAsync(options, client);
        }
        #endif

        private static Request BuildReadRequest(ReadCertificateOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Preview,
                "/DeployedDevices/Fleets/" + options.PathFleetSid + "/Certificates",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// Retrieve a list of all Certificate credentials belonging to the Fleet.
        /// </summary>
        /// <param name="options"> Read Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static ResourceSet<CertificateResource> Read(ReadCertificateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<CertificateResource>.FromJson("certificates", response.Content);
            return new ResourceSet<CertificateResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all Certificate credentials belonging to the Fleet.
        /// </summary>
        /// <param name="options"> Read Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<CertificateResource>> ReadAsync(ReadCertificateOptions options, 
                                                                                                    ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<CertificateResource>.FromJson("certificates", response.Content);
            return new ResourceSet<CertificateResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// Retrieve a list of all Certificate credentials belonging to the Fleet.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="deviceSid"> Find all Certificates authenticating specified Device. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static ResourceSet<CertificateResource> Read(string pathFleetSid, 
                                                            string deviceSid = null, 
                                                            int? pageSize = null, 
                                                            long? limit = null, 
                                                            ITwilioRestClient client = null)
        {
            var options = new ReadCertificateOptions(pathFleetSid){DeviceSid = deviceSid, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// Retrieve a list of all Certificate credentials belonging to the Fleet.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="deviceSid"> Find all Certificates authenticating specified Device. </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<CertificateResource>> ReadAsync(string pathFleetSid, 
                                                                                                    string deviceSid = null, 
                                                                                                    int? pageSize = null, 
                                                                                                    long? limit = null, 
                                                                                                    ITwilioRestClient client = null)
        {
            var options = new ReadCertificateOptions(pathFleetSid){DeviceSid = deviceSid, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<CertificateResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<CertificateResource>.FromJson("certificates", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<CertificateResource> NextPage(Page<CertificateResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Preview,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<CertificateResource>.FromJson("certificates", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<CertificateResource> PreviousPage(Page<CertificateResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Preview,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<CertificateResource>.FromJson("certificates", response.Content);
        }

        private static Request BuildUpdateRequest(UpdateCertificateOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Post,
                Rest.Domain.Preview,
                "/DeployedDevices/Fleets/" + options.PathFleetSid + "/Certificates/" + options.PathSid + "",
                client.Region,
                postParams: options.GetParams()
            );
        }

        /// <summary>
        /// Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or
        /// assigning to a Device.
        /// </summary>
        /// <param name="options"> Update Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Update(UpdateCertificateOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }

        #if !NET35
        /// <summary>
        /// Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or
        /// assigning to a Device.
        /// </summary>
        /// <param name="options"> Update Certificate parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> UpdateAsync(UpdateCertificateOptions options, 
                                                                                         ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildUpdateRequest(options, client));
            return FromJson(response.Content);
        }
        #endif

        /// <summary>
        /// Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or
        /// assigning to a Device.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="friendlyName"> The human readable description for this Certificate. </param>
        /// <param name="deviceSid"> The unique identifier of a Device to be authenticated. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Certificate </returns> 
        public static CertificateResource Update(string pathFleetSid, 
                                                 string pathSid, 
                                                 string friendlyName = null, 
                                                 string deviceSid = null, 
                                                 ITwilioRestClient client = null)
        {
            var options = new UpdateCertificateOptions(pathFleetSid, pathSid){FriendlyName = friendlyName, DeviceSid = deviceSid};
            return Update(options, client);
        }

        #if !NET35
        /// <summary>
        /// Update the given properties of a specific Certificate credential in the Fleet, giving it a friendly name or
        /// assigning to a Device.
        /// </summary>
        /// <param name="pathFleetSid"> The fleet_sid </param>
        /// <param name="pathSid"> A string that uniquely identifies the Certificate. </param>
        /// <param name="friendlyName"> The human readable description for this Certificate. </param>
        /// <param name="deviceSid"> The unique identifier of a Device to be authenticated. </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Certificate </returns> 
        public static async System.Threading.Tasks.Task<CertificateResource> UpdateAsync(string pathFleetSid, 
                                                                                         string pathSid, 
                                                                                         string friendlyName = null, 
                                                                                         string deviceSid = null, 
                                                                                         ITwilioRestClient client = null)
        {
            var options = new UpdateCertificateOptions(pathFleetSid, pathSid){FriendlyName = friendlyName, DeviceSid = deviceSid};
            return await UpdateAsync(options, client);
        }
        #endif

        /// <summary>
        /// Converts a JSON string into a CertificateResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> CertificateResource object represented by the provided JSON </returns> 
        public static CertificateResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<CertificateResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// A string that uniquely identifies this Certificate.
        /// </summary>
        [JsonProperty("sid")]
        public string Sid { get; private set; }
        /// <summary>
        /// URL of this Certificate.
        /// </summary>
        [JsonProperty("url")]
        public Uri Url { get; private set; }
        /// <summary>
        /// A human readable description for this Certificate.
        /// </summary>
        [JsonProperty("friendly_name")]
        public string FriendlyName { get; private set; }
        /// <summary>
        /// The unique identifier of the Fleet.
        /// </summary>
        [JsonProperty("fleet_sid")]
        public string FleetSid { get; private set; }
        /// <summary>
        /// The unique SID that identifies this Account.
        /// </summary>
        [JsonProperty("account_sid")]
        public string AccountSid { get; private set; }
        /// <summary>
        /// The unique identifier of a mapped Device.
        /// </summary>
        [JsonProperty("device_sid")]
        public string DeviceSid { get; private set; }
        /// <summary>
        /// A Certificate unique payload hash.
        /// </summary>
        [JsonProperty("thumbprint")]
        public string Thumbprint { get; private set; }
        /// <summary>
        /// The date this Certificate was created.
        /// </summary>
        [JsonProperty("date_created")]
        public DateTime? DateCreated { get; private set; }
        /// <summary>
        /// The date this Certificate was updated.
        /// </summary>
        [JsonProperty("date_updated")]
        public DateTime? DateUpdated { get; private set; }

        private CertificateResource()
        {

        }
    }

}