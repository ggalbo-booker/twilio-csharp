/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /
/// <summary>
/// LocalResource
/// </summary>

using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Clients;
using Twilio.Converters;
using Twilio.Exceptions;
using Twilio.Http;
using Twilio.Types;

namespace Twilio.Rest.Api.V2010.Account.AvailablePhoneNumberCountry 
{

    public class LocalResource : Resource 
    {
        private static Request BuildReadRequest(ReadLocalOptions options, ITwilioRestClient client)
        {
            return new Request(
                HttpMethod.Get,
                Rest.Domain.Api,
                "/2010-04-01/Accounts/" + (options.PathAccountSid ?? client.AccountSid) + "/AvailablePhoneNumbers/" + options.PathCountryCode + "/Local.json",
                client.Region,
                queryParams: options.GetParams()
            );
        }

        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Local parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Local </returns> 
        public static ResourceSet<LocalResource> Read(ReadLocalOptions options, ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = client.Request(BuildReadRequest(options, client));

            var page = Page<LocalResource>.FromJson("available_phone_numbers", response.Content);
            return new ResourceSet<LocalResource>(page, options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="options"> Read Local parameters </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Local </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<LocalResource>> ReadAsync(ReadLocalOptions options, 
                                                                                              ITwilioRestClient client = null)
        {
            client = client ?? TwilioClient.GetRestClient();
            var response = await client.RequestAsync(BuildReadRequest(options, client));

            var page = Page<LocalResource>.FromJson("available_phone_numbers", response.Content);
            return new ResourceSet<LocalResource>(page, options, client);
        }
        #endif

        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathCountryCode"> The country_code </param>
        /// <param name="pathAccountSid"> The account_sid </param>
        /// <param name="areaCode"> The area_code </param>
        /// <param name="contains"> The contains </param>
        /// <param name="smsEnabled"> The sms_enabled </param>
        /// <param name="mmsEnabled"> The mms_enabled </param>
        /// <param name="voiceEnabled"> The voice_enabled </param>
        /// <param name="excludeAllAddressRequired"> The exclude_all_address_required </param>
        /// <param name="excludeLocalAddressRequired"> The exclude_local_address_required </param>
        /// <param name="excludeForeignAddressRequired"> The exclude_foreign_address_required </param>
        /// <param name="beta"> The beta </param>
        /// <param name="nearNumber"> The near_number </param>
        /// <param name="nearLatLong"> The near_lat_long </param>
        /// <param name="distance"> The distance </param>
        /// <param name="inPostalCode"> The in_postal_code </param>
        /// <param name="inRegion"> The in_region </param>
        /// <param name="inRateCenter"> The in_rate_center </param>
        /// <param name="inLata"> The in_lata </param>
        /// <param name="inLocality"> The in_locality </param>
        /// <param name="faxEnabled"> The fax_enabled </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> A single instance of Local </returns> 
        public static ResourceSet<LocalResource> Read(string pathCountryCode, 
                                                      string pathAccountSid = null, 
                                                      int? areaCode = null, 
                                                      string contains = null, 
                                                      bool? smsEnabled = null, 
                                                      bool? mmsEnabled = null, 
                                                      bool? voiceEnabled = null, 
                                                      bool? excludeAllAddressRequired = null, 
                                                      bool? excludeLocalAddressRequired = null, 
                                                      bool? excludeForeignAddressRequired = null, 
                                                      bool? beta = null, 
                                                      Types.PhoneNumber nearNumber = null, 
                                                      string nearLatLong = null, 
                                                      int? distance = null, 
                                                      string inPostalCode = null, 
                                                      string inRegion = null, 
                                                      string inRateCenter = null, 
                                                      string inLata = null, 
                                                      string inLocality = null, 
                                                      bool? faxEnabled = null, 
                                                      int? pageSize = null, 
                                                      long? limit = null, 
                                                      ITwilioRestClient client = null)
        {
            var options = new ReadLocalOptions(pathCountryCode){PathAccountSid = pathAccountSid, AreaCode = areaCode, Contains = contains, SmsEnabled = smsEnabled, MmsEnabled = mmsEnabled, VoiceEnabled = voiceEnabled, ExcludeAllAddressRequired = excludeAllAddressRequired, ExcludeLocalAddressRequired = excludeLocalAddressRequired, ExcludeForeignAddressRequired = excludeForeignAddressRequired, Beta = beta, NearNumber = nearNumber, NearLatLong = nearLatLong, Distance = distance, InPostalCode = inPostalCode, InRegion = inRegion, InRateCenter = inRateCenter, InLata = inLata, InLocality = inLocality, FaxEnabled = faxEnabled, PageSize = pageSize, Limit = limit};
            return Read(options, client);
        }

        #if !NET35
        /// <summary>
        /// read
        /// </summary>
        /// <param name="pathCountryCode"> The country_code </param>
        /// <param name="pathAccountSid"> The account_sid </param>
        /// <param name="areaCode"> The area_code </param>
        /// <param name="contains"> The contains </param>
        /// <param name="smsEnabled"> The sms_enabled </param>
        /// <param name="mmsEnabled"> The mms_enabled </param>
        /// <param name="voiceEnabled"> The voice_enabled </param>
        /// <param name="excludeAllAddressRequired"> The exclude_all_address_required </param>
        /// <param name="excludeLocalAddressRequired"> The exclude_local_address_required </param>
        /// <param name="excludeForeignAddressRequired"> The exclude_foreign_address_required </param>
        /// <param name="beta"> The beta </param>
        /// <param name="nearNumber"> The near_number </param>
        /// <param name="nearLatLong"> The near_lat_long </param>
        /// <param name="distance"> The distance </param>
        /// <param name="inPostalCode"> The in_postal_code </param>
        /// <param name="inRegion"> The in_region </param>
        /// <param name="inRateCenter"> The in_rate_center </param>
        /// <param name="inLata"> The in_lata </param>
        /// <param name="inLocality"> The in_locality </param>
        /// <param name="faxEnabled"> The fax_enabled </param>
        /// <param name="pageSize"> Page size </param>
        /// <param name="limit"> Record limit </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> Task that resolves to A single instance of Local </returns> 
        public static async System.Threading.Tasks.Task<ResourceSet<LocalResource>> ReadAsync(string pathCountryCode, 
                                                                                              string pathAccountSid = null, 
                                                                                              int? areaCode = null, 
                                                                                              string contains = null, 
                                                                                              bool? smsEnabled = null, 
                                                                                              bool? mmsEnabled = null, 
                                                                                              bool? voiceEnabled = null, 
                                                                                              bool? excludeAllAddressRequired = null, 
                                                                                              bool? excludeLocalAddressRequired = null, 
                                                                                              bool? excludeForeignAddressRequired = null, 
                                                                                              bool? beta = null, 
                                                                                              Types.PhoneNumber nearNumber = null, 
                                                                                              string nearLatLong = null, 
                                                                                              int? distance = null, 
                                                                                              string inPostalCode = null, 
                                                                                              string inRegion = null, 
                                                                                              string inRateCenter = null, 
                                                                                              string inLata = null, 
                                                                                              string inLocality = null, 
                                                                                              bool? faxEnabled = null, 
                                                                                              int? pageSize = null, 
                                                                                              long? limit = null, 
                                                                                              ITwilioRestClient client = null)
        {
            var options = new ReadLocalOptions(pathCountryCode){PathAccountSid = pathAccountSid, AreaCode = areaCode, Contains = contains, SmsEnabled = smsEnabled, MmsEnabled = mmsEnabled, VoiceEnabled = voiceEnabled, ExcludeAllAddressRequired = excludeAllAddressRequired, ExcludeLocalAddressRequired = excludeLocalAddressRequired, ExcludeForeignAddressRequired = excludeForeignAddressRequired, Beta = beta, NearNumber = nearNumber, NearLatLong = nearLatLong, Distance = distance, InPostalCode = inPostalCode, InRegion = inRegion, InRateCenter = inRateCenter, InLata = inLata, InLocality = inLocality, FaxEnabled = faxEnabled, PageSize = pageSize, Limit = limit};
            return await ReadAsync(options, client);
        }
        #endif

        /// <summary>
        /// Fetch the target page of records
        /// </summary>
        /// <param name="targetUrl"> API-generated URL for the requested results page </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The target page of records </returns> 
        public static Page<LocalResource> GetPage(string targetUrl, ITwilioRestClient client)
        {
            client = client ?? TwilioClient.GetRestClient();

            var request = new Request(
                HttpMethod.Get,
                targetUrl
            );

            var response = client.Request(request);
            return Page<LocalResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Fetch the next page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The next page of records </returns> 
        public static Page<LocalResource> NextPage(Page<LocalResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetNextPageUrl(
                    Rest.Domain.Api,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<LocalResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Fetch the previous page of records
        /// </summary>
        /// <param name="page"> current page of records </param>
        /// <param name="client"> Client to make requests to Twilio </param>
        /// <returns> The previous page of records </returns> 
        public static Page<LocalResource> PreviousPage(Page<LocalResource> page, ITwilioRestClient client)
        {
            var request = new Request(
                HttpMethod.Get,
                page.GetPreviousPageUrl(
                    Rest.Domain.Api,
                    client.Region
                )
            );

            var response = client.Request(request);
            return Page<LocalResource>.FromJson("available_phone_numbers", response.Content);
        }

        /// <summary>
        /// Converts a JSON string into a LocalResource object
        /// </summary>
        /// <param name="json"> Raw JSON string </param>
        /// <returns> LocalResource object represented by the provided JSON </returns> 
        public static LocalResource FromJson(string json)
        {
            // Convert all checked exceptions to Runtime
            try
            {
                return JsonConvert.DeserializeObject<LocalResource>(json);
            }
            catch (JsonException e)
            {
                throw new ApiException(e.Message, e);
            }
        }

        /// <summary>
        /// The friendly_name
        /// </summary>
        [JsonProperty("friendly_name")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber FriendlyName { get; private set; }
        /// <summary>
        /// The phone_number
        /// </summary>
        [JsonProperty("phone_number")]
        [JsonConverter(typeof(PhoneNumberConverter))]
        public Types.PhoneNumber PhoneNumber { get; private set; }
        /// <summary>
        /// The lata
        /// </summary>
        [JsonProperty("lata")]
        public string Lata { get; private set; }
        /// <summary>
        /// The locality
        /// </summary>
        [JsonProperty("locality")]
        public string Locality { get; private set; }
        /// <summary>
        /// The rate_center
        /// </summary>
        [JsonProperty("rate_center")]
        public string RateCenter { get; private set; }
        /// <summary>
        /// The latitude
        /// </summary>
        [JsonProperty("latitude")]
        public decimal? Latitude { get; private set; }
        /// <summary>
        /// The longitude
        /// </summary>
        [JsonProperty("longitude")]
        public decimal? Longitude { get; private set; }
        /// <summary>
        /// The region
        /// </summary>
        [JsonProperty("region")]
        public string Region { get; private set; }
        /// <summary>
        /// The postal_code
        /// </summary>
        [JsonProperty("postal_code")]
        public string PostalCode { get; private set; }
        /// <summary>
        /// The iso_country
        /// </summary>
        [JsonProperty("iso_country")]
        public string IsoCountry { get; private set; }
        /// <summary>
        /// The address_requirements
        /// </summary>
        [JsonProperty("address_requirements")]
        public string AddressRequirements { get; private set; }
        /// <summary>
        /// The beta
        /// </summary>
        [JsonProperty("beta")]
        public bool? Beta { get; private set; }
        /// <summary>
        /// The capabilities
        /// </summary>
        [JsonProperty("capabilities")]
        public PhoneNumberCapabilities Capabilities { get; private set; }

        private LocalResource()
        {

        }
    }

}