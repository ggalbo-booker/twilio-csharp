/// This code was generated by
/// \ / _    _  _|   _  _
///  | (_)\/(_)(_|\/| |(/_  v1.0.0
///       /       /

using System;
using System.Collections.Generic;
using Twilio.Base;
using Twilio.Converters;

namespace Twilio.Rest.Accounts.V1.Credential 
{

    /// <summary>
    /// ReadAwsOptions
    /// </summary>
    public class ReadAwsOptions : ReadOptions<AwsResource> 
    {
        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public override List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (PageSize != null)
            {
                p.Add(new KeyValuePair<string, string>("PageSize", PageSize.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// CreateAwsOptions
    /// </summary>
    public class CreateAwsOptions : IOptions<AwsResource> 
    {
        /// <summary>
        /// The credentials
        /// </summary>
        public string Credentials { get; }
        /// <summary>
        /// The friendly_name
        /// </summary>
        public string FriendlyName { get; set; }
        /// <summary>
        /// The account_sid
        /// </summary>
        public string AccountSid { get; set; }

        /// <summary>
        /// Construct a new CreateAwsOptions
        /// </summary>
        /// <param name="credentials"> The credentials </param>
        public CreateAwsOptions(string credentials)
        {
            Credentials = credentials;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (Credentials != null)
            {
                p.Add(new KeyValuePair<string, string>("Credentials", Credentials.ToString()));
            }

            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            if (AccountSid != null)
            {
                p.Add(new KeyValuePair<string, string>("AccountSid", AccountSid.ToString()));
            }

            return p;
        }
    }

    /// <summary>
    /// FetchAwsOptions
    /// </summary>
    public class FetchAwsOptions : IOptions<AwsResource> 
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new FetchAwsOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public FetchAwsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

    /// <summary>
    /// UpdateAwsOptions
    /// </summary>
    public class UpdateAwsOptions : IOptions<AwsResource> 
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }
        /// <summary>
        /// The friendly_name
        /// </summary>
        public string FriendlyName { get; set; }

        /// <summary>
        /// Construct a new UpdateAwsOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public UpdateAwsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            if (FriendlyName != null)
            {
                p.Add(new KeyValuePair<string, string>("FriendlyName", FriendlyName));
            }

            return p;
        }
    }

    /// <summary>
    /// DeleteAwsOptions
    /// </summary>
    public class DeleteAwsOptions : IOptions<AwsResource> 
    {
        /// <summary>
        /// The sid
        /// </summary>
        public string PathSid { get; }

        /// <summary>
        /// Construct a new DeleteAwsOptions
        /// </summary>
        /// <param name="pathSid"> The sid </param>
        public DeleteAwsOptions(string pathSid)
        {
            PathSid = pathSid;
        }

        /// <summary>
        /// Generate the necessary parameters
        /// </summary>
        public List<KeyValuePair<string, string>> GetParams()
        {
            var p = new List<KeyValuePair<string, string>>();
            return p;
        }
    }

}